{"name":"Dropbox Backup","tagline":"Dropbox Backup is a collection of BASH scripts for backing up your MySQL databases with Dropbox Uploader.","body":"# Dropbox Backup\r\n\r\n`Dropbox Backup` is a collection of **BASH** scripts for backing up your MySQL databases with [Dropbox Uploader](https://github.com/andreafabrizi/Dropbox-Uploader/).\r\n\r\n## Setup\r\n\r\nFirst clone this repo:\r\n```bash\r\n$ cd ~\r\n$ git clone https://github.com/CubicApps/DropboxBackup.git\r\n```\r\n\r\nThen give the scripts execution permissions:\r\n```bash\r\n$ cd ~/DropBoxBackup\r\n$ chmod +x dropbox_uploader.sh\r\n$ chmod +x db_backup.sh\r\n$ chmod +x log_backup.sh\r\n```\r\n\r\nFinally, run the `dropbox_uploader.sh` script and follow the on-screen instructions to connect it to your Dropbox account:\r\n```bash\r\n$ ./dropbox_uploader.sh\r\n```\r\n\r\n## Usage\r\n\r\nThe `Dropbox Backup` syntax is:\r\n\r\n```bash\r\n$ ~/DropboxBackup/db_backup.sh -u dbUsername -p dbPassword -h dbHost -d dbName\r\n```\r\n\r\nThis script will create a MySQL dump file, which is then compressed into a `.tar.gz` file and then uploaded to your dropbox folder.\r\n\r\n## Backup Log File\r\n\r\nEvery time the `db_backup.sh` script is executed, entries are added to `~/tmp/backup.log`. This log file can be backed up to dropbox by executing the `./log_backup.sh` script as follows:\r\n\r\n```bash\r\n$ ~/DropboxBackup/log_backup.sh\r\n```\r\n\r\nAlternatively, the log file can be backed up manually by doing the following:\r\n```bash\r\n$ cd ~/tmp\r\n$ BKP_LOG_FILE=\"log-backup-$(date +\"%Y-%m-%d_%H-%M-%S\").tar.gz\"\r\n$ tar -zcf \"$BKP_LOG_FILE\" \"backup.log\"\r\n$ ~/DropboxBackup/dropbox_uploader.sh -f ~/.dropbox_uploader upload $BKP_LOG_FILE \"/Log_Backups/$BKP_LOG_FILE\"\r\n$ rm $BKP_LOG_FILE\r\n```\r\n\r\nThe above commands perform the following:\r\n\r\n1. Change to the `tmp` directory.\r\n2. Create a new name for the backup.\r\n3. Compress the existing log file into a `.tar.gz`.\r\n4. Upload the compressed file to dropbox.\r\n5. Delete the archive.\r\n\r\n# Dropbox Uploader\r\n\r\nDropbox Uploader is a **BASH** script which can be used to upload, download, delete, list files (and more!) from **Dropbox**, an online file sharing, synchronization and backup service. \r\n\r\nIt's written in BASH scripting language and only needs **cURL**.\r\n\r\n**Why use this script?**\r\n\r\n* **Portable:** It's written in BASH scripting and only needs *cURL* (curl is a tool to transfer data from or to a server, available for all operating systems and installed by default in many linux distributions).\r\n* **Secure:** It's not required to provide your username/password to this script, because it uses the official Dropbox API for the authentication process. \r\n\r\nPlease refer to the &lt;Wiki&gt;(https://github.com/andreafabrizi/Dropbox-Uploader/wiki) for tips and additional information about this project. The Wiki is also the place where you can share your scripts and examples related to Dropbox Uploader.\r\n\r\n## Features\r\n\r\n* Cross platform\r\n* Support for the official Dropbox API\r\n* No password required or stored\r\n* Simple step-by-step configuration wizard\r\n* Simple and chunked file upload\r\n* File and recursive directory download\r\n* File and recursive directory upload\r\n* Shell wildcard expansion (only for upload)\r\n* Delete/Move/Rename/Copy/List files\r\n* Create share link\r\n\r\n## Getting started\r\n\r\nFirst, clone the repository using git (recommended):\r\n\r\n```bash\r\ngit clone https://github.com/andreafabrizi/Dropbox-Uploader/\r\n```\r\n\r\nor download the script manually using this command:\r\n\r\n```bash\r\ncurl \"https://raw.githubusercontent.com/andreafabrizi/Dropbox-Uploader/master/dropbox_uploader.sh\" -o dropbox_uploader.sh\r\n```\r\n\r\nThen give the execution permission to the script and run it:\r\n\r\n```bash\r\n $chmod +x dropbox_uploader.sh\r\n $./dropbox_uploader.sh\r\n```\r\n\r\nThe first time you run `dropbox_uploader`, you'll be guided through a wizard in order to configure access to your Dropbox. This configuration will be stored in `~/.dropbox_uploader`.\r\n\r\n### Configuration wizard\r\n\r\nThe configuration wizard is pretty self-explanatory. One thing to notice is that if you choose \"App permission\", your uploads will end up on Dropbox under an `App/<your_app_name>` folder. To have them stored in another folder, such as in `/dir/`, you'll need to give Dropbox-Uploader permission to all Dropbox files.\r\n\r\n## Usage\r\n\r\nThe syntax is quite simple:\r\n\r\n```\r\n./dropbox_uploader.sh COMMAND [PARAMETERS]...\r\n\r\n[%%]: Optional param\r\n<%%>: Required param\r\n```\r\n\r\n**Available commands:**\r\n\r\n* **upload** &lt;LOCAL_FILE/DIR ...&gt; &lt;REMOTE_FILE/DIR&gt;  \r\nUpload a local file or directory to a remote Dropbox folder.  \r\nIf the file is bigger than 150Mb the file is uploaded using small chunks (default 4Mb); \r\nin this case a . (dot) is printed for every chunk successfully uploaded and a * (star) if an error \r\noccurs (the upload is retried for a maximum of three times).\r\nOnly if the file is smaller than 150Mb, the standard upload API is used, and if the -p option is used\r\nthe default curl progress bar is displayed during the upload process.  \r\nThe local file/dir parameter supports wildcards expansion.\r\n\r\n* **download** &lt;REMOTE_FILE/DIR&gt; [LOCAL_FILE/DIR]  \r\nDownload file or directory from Dropbox to a local folder\r\n\r\n* **delete** &lt;REMOTE_FILE/DIR&gt;  \r\nRemove a remote file or directory from Dropbox\r\n\r\n* **move** &lt;REMOTE_FILE/DIR&gt; &lt;REMOTE_FILE/DIR&gt;  \r\nMove or rename a remote file or directory\r\n\r\n* **copy** &lt;REMOTE_FILE/DIR&gt; &lt;REMOTE_FILE/DIR&gt;  \r\nCopy a remote file or directory\r\n\r\n* **mkdir** &lt;REMOTE_DIR&gt;  \r\nCreate a remote directory on DropBox\r\n\r\n* **list** [REMOTE_DIR]  \r\nList the contents of the remote Dropbox folder\r\n\r\n* **share** &lt;REMOTE_FILE&gt;  \r\nGet a public share link for the specified file or directory\r\n \r\n* **info**  \r\nPrint some info about your Dropbox account\r\n\r\n* **unlink**  \r\nUnlink the script from your Dropbox account\r\n\r\n\r\n**Optional parameters:**  \r\n* **-f &lt;FILENAME&gt;**  \r\nLoad the configuration file from a specific file\r\n\r\n* **-s**  \r\nSkip already existing files when download/upload. Default: Overwrite\r\n\r\n* **-d**  \r\nEnable DEBUG mode\r\n\r\n* **-q**  \r\nQuiet mode. Don't show progress meter or messages\r\n\r\n* **-p**  \r\nShow cURL progress meter\r\n\r\n* **-k**  \r\nDoesn't check for SSL certificates (insecure)\r\n\r\n\r\n**Examples:**\r\n```bash\r\n    ./dropbox_uploader.sh upload /etc/passwd /myfiles/passwd.old\r\n    ./dropbox_uploader.sh upload *.zip /\r\n    ./dropbox_uploader.sh download /backup.zip\r\n    ./dropbox_uploader.sh delete /backup.zip\r\n    ./dropbox_uploader.sh mkdir /myDir/\r\n    ./dropbox_uploader.sh upload \"My File.txt\" \"My File 2.txt\"\r\n    ./dropbox_uploader.sh share \"My File.txt\"\r\n    ./dropbox_uploader.sh list\r\n```\r\n\r\n## Tested Environments\r\n\r\n* GNU Linux\r\n* FreeBSD 8.3/10.0\r\n* MacOSX\r\n* Windows/Cygwin\r\n* Raspberry Pi\r\n* QNAP\r\n* iOS\r\n* OpenWRT\r\n* Chrome OS\r\n* OpenBSD\r\n\r\nIf you have successfully tested this script on others systems or platforms please let me know!\r\n\r\n## Running as cron job\r\nDropbox Uploader relies on a different configuration file for each system user. The default configuration file location is HOME_DIRECTORY/.dropbox_uploader. This means that if you do the setup with your user and then you try to run a cron job as root, it won't works.  \r\nSo, when running this script using cron, please keep in mind the following:\r\n* Remember to setup the script with the user used to run the cron job\r\n* Use always the -f option to specify the full configuration file path, because sometimes in the cron environment the home folder path is not detected correctly\r\n* My advice is, for security reasons, to not share the same configuration file with different users\r\n\r\n## How to setup a proxy\r\n\r\nTo use a proxy server, just set the **https_proxy** environment variable:\r\n\r\n**Linux:**\r\n```bash\r\n    export HTTP_PROXY_USER=XXXX\r\n    export HTTP_PROXY_PASSWORD=YYYY\r\n    export https_proxy=http://192.168.0.1:8080\r\n```\r\n\r\n**BSD:**\r\n```bash\r\n    setenv HTTP_PROXY_USER XXXX\r\n    setenv HTTP_PROXY_PASSWORD YYYY\r\n    setenv https_proxy http://192.168.0.1:8080\r\n```\r\n   \r\n## BASH and Curl installation\r\n\r\n**Debian & Ubuntu Linux:**\r\n```bash\r\n    sudo apt-get install bash (Probably BASH is already installed on your system)\r\n    sudo apt-get install curl\r\n```\r\n\r\n**BSD:**\r\n```bash\r\n    cd /usr/ports/shells/bash && make install clean\r\n    cd /usr/ports/ftp/curl && make install clean\r\n```\r\n\r\n**Cygwin:**  \r\nYou need to install these packages:  \r\n* curl\r\n* ca-certificates\r\n* dos2unix\r\n\r\nBefore running the script, you need to convert it using the dos2unix command.\r\n\r\n\r\n**Build cURL from source:**\r\n* Download the source tarball from http://curl.haxx.se/download.html\r\n* Follow the INSTALL instructions\r\n\r\n## DropShell\r\n\r\nDropShell is an interactive DropBox shell, based on DropBox Uploader:\r\n\r\n```bash\r\nDropShell v0.2\r\nThe Intractive Dropbox SHELL\r\nAndrea Fabrizi - andrea.fabrizi@gmail.com\r\n\r\nType help for the list of the available commands.\r\n\r\nandrea@Dropbox:/$ ls\r\n [D] 0       Apps\r\n [D] 0       Camera Uploads\r\n [D] 0       Public\r\n [D] 0       scripts\r\n [D] 0       Security\r\n [F] 105843  notes.txt\r\nandrea@DropBox:/ServerBackup$ get notes.txt\r\n```\r\n\r\n## Donations\r\n\r\n If you want to support this project, please consider donating:\r\n * PayPal: andrea.fabrizi@gmail.com\r\n * BTC: 1JHCGAMpKqUwBjcT3Kno9Wd5z16K6WKPqG\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}